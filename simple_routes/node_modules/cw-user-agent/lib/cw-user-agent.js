'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _deviceInfo = require('./device-info');

var _deviceInfo2 = _interopRequireDefault(_deviceInfo);

var _appleDeviceInfo = require('./apple-device-info');

var _appleDeviceInfo2 = _interopRequireDefault(_appleDeviceInfo);

var _androidDeviceInfo = require('./android-device-info');

var _androidDeviceInfo2 = _interopRequireDefault(_androidDeviceInfo);

var _windowsDeviceInfo = require('./windows-device-info');

var _windowsDeviceInfo2 = _interopRequireDefault(_windowsDeviceInfo);

var _matchUtils = require('./match-utils');

var Parser = (function () {
  function Parser() {
    _classCallCheck(this, Parser);
  }

  _createClass(Parser, [{
    key: 'setUA',

    /**
     * @param {string} ua - user agent
     * @returns {void}
     */
    value: function setUA(ua) {
      this.ua = ua;
    }
  }, {
    key: 'deviceInfo',

    /**
     * @returns {cwua.DeviceInfo}
     */
    value: function deviceInfo() {
      if ((0, _matchUtils.isApple)(this.ua)) {
        return new _appleDeviceInfo2['default'](this.ua);
      }
      if ((0, _matchUtils.isAndroid)(this.ua)) {
        return new _androidDeviceInfo2['default'](this.ua);
      }
      if ((0, _matchUtils.isWindows)(this.ua)) {
        return new _windowsDeviceInfo2['default'](this.ua);
      }
      return new _deviceInfo2['default'](this.ua);
    }
  }]);

  return Parser;
})();

exports['default'] = Parser;
module.exports = exports['default'];

// noop